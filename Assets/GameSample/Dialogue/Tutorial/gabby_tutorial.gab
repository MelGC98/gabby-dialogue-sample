//
// This file contains all the tutorial dialogue for learning to use the language.
//
gabby 0.2
language english

// FIXME syntax highlighting can't handle comments with . in them on dialogue definition lines
// FIXME jumps can't handle comments 
// TODO tagging implicit dialogue with <> shouldn't retain the tag past that line, it should be a temporary state
//      Tagging explicit dialogue in () should continue to retain those tags for all implicit dialogue that follows

[Gabby.TutorialStart]
    * That's a big TV!
    * They've got a bunch of game consoles hooked up to it, too.
    
    * <i>Do you want to play the tutorial?</i>
    : Yes
    : No
        end

    (Gabby) Hey, I'm Gabby!
    <very happy>
    + And this is Kay.

    (Kay) Hey!

    (Gabby, very happy) Welcome to our tutorial!

    (Kay) We hope it will help you get started with using Gabby!

    (Gabby, very happy) Yeah!

    >> Gabby.TutorialIntroduction

[Gabby.TutorialIntroduction] // TODO it would be useful to have OnDialogue handlers, ex On(Gabby,TutorialIntroduction)
    - Ok, so when it comes to Gabby, there's a lot to talk about!
    + But you'll find that it's all pretty straightforward, I think!
    - The tutorial is broken down into multiple interactive sections.
    
    (Kay) We'll also show you Gabby snippets along the way, but the best way to learn is by looking at the sample scripts and trying your hand at writing something yourself!
    (Kay, very happy) Anyone can do it! Let your creative side show!

    (Gabby) Ok, if you're ready to go, let's <b>jump</b> right in to the tutorial!
    >> Gabby.TutorialMainLoop

[Gabby.TutorialMainLoop]
    (Gabby) Tell me what you want to learn about!
    : The basics.
        (Player) Let's start with the basics.
        (Gabby)  Starting from the top, huh? Ok!
        >> Gabby.Basics
    : Gabby features.
        (Player) I want to learn more about the different features of Gabby.
        (Gabby)  Alright, let's talk features!
        >> Gabby.Features
    : Using Gabby in a game.
        (Player) I want to use Gabby to make games - how do I do that?
        (Gabby)  Hey, me too! Let's talk about making games!
        >> Gabby.MakingGames
    : Is Gabby Really Game-Ready?
        (Player) Is Gabby really ready to be used in production for real games?
        (Gabby, annoyed)  H-HEY! Are you implying something bad?
        (Gabby)         But, that's fair. Let's talk about what we thought about when writing Gabby, and you can decide for yourself.
        -               And of course, if we missed something, let us know, because we really want Gabby to be something anyone can rely on.
        >> Gabby.IndustryReady
    : I'm done!
        (Player) Alright, I think I'm done!
        (Gabby)  Thanks for checking out the tutorial!
        <shy>
        -        I know I tend to talk too much.
        <very happy>
        -        Good luck with your writing!
        end

[Gabby.IndustryReady]
    : Can Gabby be localized?
        (Player) Can dialogue written in Gabby be localized?
        (Kay)   Localization was a huge consideration when making Gabby.
        -       In the end, we took a different approach than the usual to support it.
        -       Most dialogue systems support localization by exporting strings into tables, and then swapping them at runtime with some line ID.
        -       We really don't like that. It's just awkward, and limiting.
        +       Of course, you can still work with Gabby that way if you want, it'll be a bit of effort but you could export all the lines and associate them with text replacement.
        -       But anyway, in Gabby, localization is done at the script level, scoped to an entire file.
        -       The idea is that scripts will come in multiple languages, and within those languages, scripts have the flexibility to adjust flow somewhat when they need to.
        -       This flexibility can be really useful!
        -       Sometimes, you have a joke or something in your source language that doesn't translate well.
        -       Or, a line gets really long, or you need to add supporting lines to it for some reason.
        -       By making the localization script-driven, you can change up the flow per-language without it breaking anything in your game.
        +       The game won't even know.
        -       It's a really simple, straightforward approach to localizing your dialogue and your game.
        -       Of course, the devil's in the details, and the truth is we don't know if a typical localization company is going to be happy to work in Gabby script files.
        -       There's also the problem of localizers potentially breaking things, but this sort of thing should be caught in your tooling... somehow.
        -       Anyway, I know this isn't a perfect answer, but hopefully it gives enough information that you can make an informed choice.
        -       If this method of localization won't work for you, we believe it would be really easy to add support for another approach without having to fundamentally change your scripts.

    : If I work in Gabby, will my work get "locked in" to it? What if it doesn't work out?
        (Player) If I work in Gabby, will my work get "locked in" to it? What if it doesn't work out?

        (Kay)   This was a concern I had when I was looking at dialogue systems that come with their own editor.
        -       They often use their own format that's not readable, and maybe not even exportable from.
        -       I was worried about having all our dialogue in this format, and not being able to switch it over to another system if I needed to.
        -       With Gabby, well, this really shouldn't be a problem. Yes, you're writing in Gabby, but the vast majority of what you're writing is just your dialogue.
        -       The format is highly readable, and if needed, you could write a tool to easily strip out all the Gabby specific stuff.
        -       Your work is all safe in a plain text file that you can open and read in any text editor.

        -       That was another concern I had with dialogue systems that use their own editors and formats, actually.
        -       In Unity, you can sometimes change serialized variable names or delete them, and suddenly you wipe out all the data you associated with it.
        -       This could be devastating if your work's not backed up. We never want that to happen in Gabby.
        +       And with everything coming from external text files, it won't. 

        -       Lastly, you might be concerned about getting locked into Unity.
        -       Well, don't be! Your dialogue file is written in Gabby, and it's not engine specific.
        -       You can take it with you to any other engine you go to, or write your own.
        -       The only thing is making a parser to work with it.
        -       Maybe you use Unity styling, and yeah, your action and conditional handlers are written specific to Unity, but that's a separate concern from your dialogue.
        -       The triggers are all portable, and if you're jumping ship from Unity partway into a project, you're already committing to rewriting your game scripts.

        -       Anyway, hopefully that eases any concerns about getting "stuck" with Gabby.

    : What if our writers can't program?
        (Player) What if our writers can't program?

        (Kay)    Well, that's our main use case!
        -        Gabby shouldn't feel like you're programming, it should feel like writing.
        -        Some features look code-like, but it's really quite different and approachable... We think.

        (Gabby)  Yeah, it's really easy!
        -        The goal is to make writing game dialogue accessible for the average person.
        -        If you want to write dialogue, or you want to write a visual novel even, what should be stopping you?
        -        Just write! That's the creative part, and the hard part. You shouldn't have to be a programmer to do it!
        -        It's like, imagine if you wanted to learn to draw, and first you had to write a program that let you draw?
        -        That would kill your creativity.

        (Kay)    Yup. Anyway, if you're not a programmer and you're worried about learning Gabby, we encourage you to give it a try!
        +        You're exactly the kind of person we want using Gabby!

    : What about voice lines, or subtitles?
        (Player) What about voice lines, or subtitles?

        (Kay) So, for this, you probably want to use tags or actions.
        -     The simplest is tags. Tag each line that has a recorded voice line with the name of that file, like "<audio: voice1>".
        -     Or with actions, do something like "> playSound(voice1)".
        -     Maybe you could also do it in your dialogue handler code, handling each line and finding the associated voice line in your own way.
        -     Or maybe you tag your entire dialogue, and your game knows to progress audio lines in sync with text lines.
        -     Anyway, I think the tools are all there, just figure out what workflow works best for you!

    : Back
        >> Gabby.TutorialMainLoop
    >> Gabby.IndustryReady
        