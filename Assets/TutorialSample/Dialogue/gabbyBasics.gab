gabby 0.2
language english

[Gabby.Basics]
    : What is Gabby?
        (Player) What is Gabby?
        >> Gabby.WhatIsGabby

    : What are Gabby scripts?
        (Player) What are Gabby scripts?
        >> Gabby.WhatIsAGabbyScript
    
    : How do I write dialogue?
        (Player) How do I write dialogue?
        >> Gabby.HowDoIWriteDialogue

    : What are characters?
        (Player) What are characters?
        >> Gabby.WhatIsACharacter

    : How do I give my characters portraits?
        (Player) How do I give my characters portraits?
        >> Gabby.WhatIsACharacter

    : How do I integrate dialogues into my game?
        (Player) How do I integrate dialogues into my game?
        >> Gabby.DialogueIntegration

    : Enough about the basics!
        (Player) I think I've learned enough about the basics now!
        (Gabby)  That's great!
        +        Let's talk about something else!
        >> Gabby.TutorialMain

[Gabby.WhatIsGabby]
    (Gabby) Gabby is a way to write dialogue for games.
    - It's a language that was made for... well, language!
    - We wanted a way to write dialogue more naturally, that let us focus on the content without distractions.
    (Kay) And we wanted to be able to use these scripts in our games directly.
    - There shouldn't need to be code written to support the _flow_ of dialogue, that should come naturally from the script!
    (Gabby) So we made Gabby!
    : So, it's a scripting language?
        (Player) So, it's a scripting language?
        (Kay) Not exactly, but kind of!
        - We prefer to think of it as a dialogue language, or something closer to a data format.
    : I think I get it!
        (Player) I think I get it!
        (Gabby) Great!
        (Kay) Just one last detail!
    (Kay) We wanted to make sure that Gabby was easy to use, even if you aren't a programmer.
    - We didn't want Gabby to look like code. It should look like dialogue - like a book or a script.
    (Gabby) Ya! We wanted to make something that's easy to read, and easy to write.
    - Anyway, I hope that answers your question!

    : What do Gabby scripts look like?
        (Player) What do Gabby scripts look like?
        >> Gabby.WhatIsAGabbyScript
    : Go back.
        >> Gabby.Basics
        
[Gabby.WhatIsAGabbyScript]
    > show(whatIsAGabbyScript)

    (Gabby) This is a Gabby script!
    - It's pretty much just a text file that you write your dialogue in!
    
    (Kay) You're looking at the Gabby script for this section of dialogue in particular.

    (Gabby) Neat, huh?

    (Kay) We can go into detail about what everything means later on.
    - The gist of what you see here is that every dialogue is written in its own section, and they're organized by character and dialogue name.

    (Gabby) Ya! So this dialogue is called <b>Gabby.WhatIsAGabbyScript</b>, because I'm Gabby, and I'm telling you what a Gabby script is!
    
    : How does it work?
        (Player) How does it work?

        (Kay) I can break it down!
        - At the top, there's some <b>metadata</b> to define the Gabby version and the language used for the entire script.
        - Then we start a new <b>dialogue definition</b> - <i>Gabby.WhatIsAGabbyScript</i>.
        - Inside the dialogue, we have an <b>action</b> to tell the game to show a particular image.
        - Then we have our dialogue! It alternates between Gabby and me.
        + The character in the parentheses denotes who's speaking.

        (Gabby) Cool, huh?
    : Makes sense!
        (Player) Makes sense!

    (Kay) Make sure to take a look at the script files sometime, they're on GitHub!
    > set(gabbyTutorial.whatIsAGabbyScript_shown, true)

    : So, how do I write dialogue?
        >> Gabby.HowDoIWriteDialogue
    : Go back.
        >> Gabby.Basics

[Gabby.HowDoIWriteDialogue]
    
    if isEqual(gabbyTutorial.whatIsAGabbyScript_shown, false)
        (Gabby) Maybe we should take a look at a Gabby script first?
        : Alright!
            (Player) Alright!
            >> Gabby.WhatIsAGabbyScript
        : I already know!
            (Player) I already know!
            (Gabby) Oh, great!

    > show(howDoIWriteDialogue)
    (Gabby) You write dialogue by starting a section with a <b>dialogue definition</b>.
    - This tells us the character (or topic) and the dialogue name.
    - Then we have our <b>lines of dialogue</b>!
    - We write the character out first, followed by whatever we want them to say!
    - It's that simple!

    (Kay) Yep! And you can put as many dialogues as you want in the same script.
    - You can decide how you want to organize things - we've found that doing it based on the character and the content works pretty well.
    - You can see how we organized the sample on GitHub.

    (Gabby) So you'll probably have lots of different dialogues for your game.
    + Maybe dialogues like <b>[Guard.Greeting]</b>, <b>[Blacksmith.Shop]</b>, or even <b>[Inspect.Anvil]</b>!
    - They can be tied to specific characters, a generic "class" of character, or to an arbitrary topic or action.
    - If you're making a visual novel, you'll probably have much longer dialogues separated by chapter!

    (Kay) Yeah, to Gabby it's all the same, so do what makes sense for your game.
    - There are some other details to writing lines of dialogue, like continuing lines or writing narration.
    - We'll keep things brief for now, but you can read more about them in the docs!

    : How do I integrate the dialogues into my game?
    : Go back.
        >> Gabby.Basics

[Gabby.WhatIsACharacter]
    (Gabby)  You wanna learn about characters?
    -        So like, you're probably thinking, "it's obvious what a character is!"
    -        And you're right!

    (Kay)    Gabby...

    (Gabby)  I'm not done! Characters in Gabby are, well...
    
    (Kay)    In Gabby, a character is just a way of identifying who - or what - is speaking.
    -        So, in the Gabby script, I'm a character named Kay, and that's about all there is to it.

    (Gabby)  Hey, I was answering this one!
    +        So like, yeah, that's more or less it...
    -        But! Your game will have a lot more to its characters, like maybe the name you show the player is different than the name written in your scripts.
    -        Maybe you have a lot of basic guards and some special guards, and you want to share dialogue between them!
    -        You could do [GuardCommon.Greeting], and [GuardCaptain.GetQuest], or something!
    -        And your game can share them!

    (Kay)    Yep! Again, to Gabby it doesn't mean anything special, so you can organize things how you'd like.
    -        Maybe your "common guard" has a name, but for defining dialogue you don't care.
    -        This way, your game can work with generic greetings, but use the actual name when it matters.

    (Gabby)  The main point is it's really flexible, so don't box yourself in.
    -        And you can get abstract with it, too!
    -        If I'm making a game where the player can inspect objects and interact with a lot of things, I'd treat those things as a single character.
    -        I'd have dialogues like [Inspect.Garbage], [Inspect.Cupboard], and so on!
    -        Or you could do [Garbage.Inspect], [Cupboard.Inspect]...
    -        And like, for a really interactive object, you might have [Phone.Interact], [Phone.CallMom], [Phone.SpecialEventDay7], that sort of thing!
    -        Just saying, don't get too locked into the idea of a "character" meaning a living NPC. It can even be "Narrator", or something.

    (Kay)    Or, "Gabby's Weird Brain".

    (Gabby)  HEY!!

    : So, how do I give my characters portraits and emotions?
        (Player) So, how do I give my characters portraits and emotions?
        >> Gabby.Portraits
    : Go back.
        >> Gabby.Basics

[Gabby.Portraits]
    (Kay) That's up to you!
    - It's <i>technically</i> not a feature of the Gabby language.

    (Gabby) Um, ya it is! Take a look at this!
    > show(portraitExample)

    (Gabby) See? You just put a comma after the character!
    - Or you write it in angle brackets.

    (Kay) Well, yeah. That's why I said <i>technically</i>. Those are tags!
    - You can use tags for anything. We use them for portraits all over the place.
    - You could also use them in other ways!
    - We'll take a closer look at them later.

    (Gabby) Anyway, tags are a good way of handling portraits!
    - Then your game just needs to look up the image to use!

    (Kay) You can see how we did that in the sample code on GitHub!
    - Briefly, you define characters along with a set of portraits by name, and the dialogue system does the rest.

    : Let's talk more about integrating dialogues into a game.
        (Player) Let's talk more about integrating dialogues into a game.
        >> Gabby.DialogueIntegration
    : Go back.
        >> Gabby.Basics

[Gabby.DialogueIntegration]
    (Kay) This is pretty flexible based on your game, but the most straightforward way is to look up dialogues by name from your game scripts.
    - So when your player walks up to a guard and starts a conversation, your game can tell the dialogue system to run <b>[Guard.Greeting]</b>.
    - The dialogue engine takes it from there.
    + If the guard asks the player a question, or if the dialogue splits up into a bunch of mini-dialogues, the engine handles it all the same.
    - Your script only kicks things off, and the flow of dialogue is handled for you as it's written in the Gabby scripts!

    : So I have to reference every dialogue by name?
        (Player) So I have to reference every dialogue by name?

        (Kay) Nope! That's the easiest way, but you have other options.
        - You could use <b>tags</b> to organize your dialogues into groups, and the game can find them more generically that way.
        - Or you could use a single main dialogue with <b>conditionals</b> and <b>jumps</b> to simplify your game scripts.
        - We can go into detail on those later!

    : Got it!
        (Player) Got it!
    