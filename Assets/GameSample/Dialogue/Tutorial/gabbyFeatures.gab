// This contains the tutorial dialogue for the features section.
gabby 0.2
language english

[Gabby.Features]
    (Kay, very happy) The best place to learn about Gabby's features is the documentation, but we can give you an overview here regardless!
    (Kay, happy)      We'll keep this section short and to-the-point.
    >> Gabby.FeaturesMain

[Gabby.FeaturesMain]
    (Kay) What feature would you like to learn about?

    : Let's talk dialogue!
        (Player) Let's talk dialogue!
        (Kay, very happy) Ok!
        >> Gabby.AboutDialogue
    : How do I let the player make choices?
        (Player) How do I let the player make choices?
        (Kay, very happy) Ah, choices?
        + A key part of any game!
        >> Gabby.AboutChoices
    : What are jumps?
        (Player) What are jumps?
        >> Gabby.AboutJumps
    : What are actions?
        (Player) What are actions?
        >> Gabby.AboutActions
    : What are conditionals?
        (Player) What are conditionals?
        >> Gabby.AboutConditionals
    : What are tags used for?
        (Player) What are tags used for?
        >> Gabby.AboutTags
    : Back
        (Player) That's all I wanted to know.
        (Kay, very happy) Alright! If you have any other questions, feel free to ask!
        >> Gabby.TutorialMainLoop

[Gabby.AboutDialogue]
    (Kay, happy)      There's a few ways to write dialogue, and a few different types of dialogue line!
    (Kay, very happy) Check out this sample!

    > showSnippet("Tutorial/AboutDialogue")

    (Kay, happy)      There are four kinds of dialogue shown here.
    -                 You can start a line with the character name in parentheses to define who's talking explicitly.
    -                 Or, if the same character is talking for multiple lines in a row, you can just use <b>-</b>!
    (Kay, very happy) This helps reduce repetition, and makes it easier to read!

    (Gabby) It doesn't just look better, though! There's another really good reason to use it!
    -       A lot of games have bugs where the wrong character speaks a line, because of a copy / paste error that's hard to spot.
    -       When your scripts are too cluttered with boilerplate, these things happen easily!
    -       The dash makes it obvious that a change in character didn't happen, so this type of error should just go away if you get used to using it.
    
    (Kay) So, to recap, you write dialogue with the character name in parentheses, or let them monologue for a few lines with a dash!
    <very happy>
    -     Nice and simple, right?

    (Gabby) Anyway!
    +       Now for fancy dialogue!
    -       See those lines that start with <b>+</b>? That lets you continue dialogue without clearing the current line!
    -       And when you start a line with <b>*</b>, you can do narration!
    *       Gabby pauses for a moment to let the information sink in.
    -       Easy, huh?

    > hideSnippet()

    <very happy>
    -       Anyway, that's all there is to dialogue!

    >> Gabby.FeaturesMain

[Gabby.AboutChoices]
    (Kay, happy)      Making choices is really straightforward in Gabby!
    (Kay, very happy) Here's an example!

    > showSnippet("Tutorial/AboutChoices")

    (Kay, happy)      See those lines starting with <b>:</b> ?
    (Kay, very happy) Those are choices!
    (Kay, happy)      Each consecutive line becomes a choice the player can make, and they're presented all at once.
    -                 Just make sure you keep your indentation even, otherwise they might not get parsed into the same choice.

    (Gabby) So! The first choice the player can make is between "Great, I love making choices!", "Ah... But I'm so indecisive!", and "Choices? About what?".
    -       The lines that follow are the dialogue lines that will be shown after the choice is made.
    -       And then, when that inner block ends, it'll return flow to the outer block!
    <very happy>
    -       Here, let's try it! Make a choice!

    : Great, I love making choices!
        (Player) Great, I love making choices!
        (Gabby)  Good, because you just did!
    : Ah... But I'm so indecisive!
        (Player) Ah... But I'm so indecisive!
        (Gabby)  Oh... You're one of THOSE people.
    : Choices? About what?
        (Player) Choices? About what?
        (Gabby)  Pretty much nothing interesting!

    (Gabby) Wasn't that fun?
    <annoyed>
    -       Not very, I know! But still!
    <happy>
    -       At least you get the idea.

    (Gabby, very happy) Oh! And see the other set of choices below?
    -                   Notice how there's no dialogue in either of them.
    -                   That'll let the player make a choice, but it has no impact on the game at all.

    : Interesting...
    : What's the point?

    (Gabby, happy) Huh? I wasn't listening...
    (Kay, annoyed) Gabby!~

    > hideSnippet()

    (Gabby) Anyway, I think that about covers it!

    >> Gabby.FeaturesMain

[Gabby.AboutJumps]
    (Kay) Jumps are exactly what they sound like - they let you jump between dialogues!
    <very happy>
    -     Here, take a look at this!

    > showSnippet("Tutorial/AboutJumps")

    (Kay, happy) See that line that starts with <b>>></b>?
    -            That's a jump.
    -            When the first dialogue plays, it jumps to the second.
    <very happy>
    -            Then, if the player picks the first option, it'll jump back to the first dialogue!
    <happy>
    -            Just keep in mind, control doesn't return to the original dialogue when the dialogue you jumped to ends.
    -            It's like telling the dialogue engine "Go do this instead", not "Go do this, then come back".

    > hideSnippet()

    (Gabby, very happy) Pretty cool, huh?
    (Kay, very happy)   I guess that covers it!

    >> Gabby.FeaturesMain

[Gabby.AboutActions]
    (Kay) Actions let you trigger events in your game from your dialogue scripts!
    (Kay, very happy) Here, check it out!

    > showSnippet("Tutorial/AboutActions")

    (Kay, happy) Those lines that start with <b>></b> are actions!
    -            They tell the dialogue engine to trigger an event with that name.
    -            So, the actual action is implemented in your game - not in Gabby.
    <very happy>
    +            You just trigger them from Gabby!
    
    (Gabby) It's a useful way to do more from within your dialogue scripts!
    -       Especially when you want your choices to have consequences, or for your game to have some sort of progression.

    (Kay) It's basically like a function call, if you're familiar with programming.
    -     You can pass data into it too! Like in this example, where a song name can be passed into the <b>playMusic</b> action.
    -     If you're clever, you can come up with all sorts of simple and reusable actions to write.

    > hideSnippet()

    <very happy>
    -     But anyway, that's it for actions!

    >> Gabby.FeaturesMain

[Gabby.AboutConditionals]
    (Kay) Conditionals let you write branching dialogue based off the game's state!
    (Kay, very happy) Take a look at this!

    > showSnippet("Tutorial/AboutConditionals")

    (Kay, happy) See that <b>if</b>? That's a conditional!
    -            It's running a special action called <b>playerHasNotMet</b>, and passing in the value <b>Gabby</b>.
    <very happy>
    -            This is asking the game if the player has met Gabby - pretty self explanatory!

    (Gabby) So if the player hasn't met me before, it'll show the first dialogue block.
    -       Otherwise, it shows the second block!
    
    (Kay) Let's look at a better way of doing the same thing.

    > showSnippet("Tutorial/MoreAboutConditionals")

    (Kay) Here we've swapped out the <b>playerHasNotMet</b> conditional for a more reusable one, <b>isEqual</b>.
    -     We're telling the game to compare a value this time, <b>gabby.introduced</b>, to the value <b>false</b>.

    (Gabby) So again, if the player hasn't met me, it runs the first dialogue block!
    <very happy>
    -       And then as part of that dialogue block, we used an action to actually set that value!
    
    (Kay) So we can implement a character's introduction without any specialized game-side code! 
    <very happy>
    -     It's all done within Gabby!
    
    (Gabby) There's a ton of uses for conditionals. The sample demonstrates some!
    -       You can check if the player has a certain amount of gold, or a certain item...
    -       You can check if a certain quest objective has been fulfilled...
    -       You can see if the player's been to a certain location...
    <very happy>
    -       Or you could like, just pick a random number, and play a dialogue based on that!

    (Kay, very happy) Yep, it's a very useful tool!

    > hideSnippet()

    (Gabby, very happy) I think that covers it!

    >> Gabby.FeaturesMain

[Gabby.AboutTags]
    (Kay) Tags let you, uhh... Tag things!
    (Kay, annoyed) Just uh, take a look at this sample.

    > showSnippet("Tutorial/AboutTags")

    (Kay, happy) So, see those lines that are surrounded by angle brackets?
    <very happy>
    -            Those are tags!
    <happy>
    -            When the dialogue engine plays that line, your game can read those tags and do something with 'em.
    -            We mostly use them for portraits, but you can use them in any number of ways!

    (Gabby) Ooh, and see the comma after the character name on the later lines? 
    <very happy>
    -       Those are tags, too!
    <happy>
    -       They're called inline tags.
    -       They can sometimes be easier to read, so we use both depending on the context!

    (Kay) Oh, and you can tag whole dialogues, too! Not just individual lines.

    (Gabby) Yeah! Here, let's look at another example!
    + Something more than just portraits...

    > showSnippet("Tutorial/MoreAboutTags")

    (Gabby) Alright, take a look at this!
    -       I wanted to make a game where you could talk to dozens of generic, nameless NPCs, and they'd just give random greetings or whatever!
    -       The game would choose dialogues based on the character and location, and there would be a lot of different dialogues for it to randomly choose from.
    <very happy>
    -       Kay made it so we could use the tags <b>type</b>, <b>location</b>, and <b>probability</b>, and the game would use them to pick a dialogue!

    (Kay, very happy) Yeah! So in this example, if you talk to the guard at the tavern, you'll see one of these two options randomly.
    
    (Gabby) And if you talk to the guard at the castle, you get a more fitting greeting for that location!
    -       Pretty neat, huh? I think so at least!

    > hideSnippet()

    (Kay) Just keep in mind, if you want to do this for your game you'll have to implement it yourself - the tags don't do it for you.
    (Kay, very happy) Well, that about covers it!

    >> Gabby.FeaturesMain
