gabby 0.2
language english

[Gabby.MakingGames]
    : How do I use Gabby in my games?
    : What game engines support Gabby?
        (Kay) Right now, we only maintain a Unity plugin.
        - The Gabby language specification is open source, as is the Unity reference implementation.
        
    : How does the Unity plugin work?

[Gabby.Unity]
    : How do I import my dialogue scripts?  
        (Player) How do I import my dialogue scripts? 
        >> Gabby.ImportingDialogue
    : How do I make a character?
        (Player) How do I make a character?
        >> Gabby.CreateCharacter
    : Can I use Unity's text styling?
        (Player) Can I use Unity's text styling?
        >> Gabby.StylingText
    : Can I use TextMeshPro?
        (Player) Can I use TextMeshPro?
        >> Gabby.TextMeshPro
    
[Gabby.ImportingDialogue]
    (Kay) Importing is automatic!
    - We use a scriptable asset importer to parse .gab files in the editor.
    - This means that as soon as you bring your scripts into the project, they're parsed and validated!
    - And it means they're stored in a format that the game can use directly at runtime.
    + In other words, there's no runtime parsing required!

    (Gabby) You can work with the Gabby scripts like any other Unity asset.
    - How you load them and reference them is up to you!
    - For the sample, we just assign them in the inspector. Simplicity is best!

    >> Gabby.Unity

[Gabby.CreateCharacter]
    (Kay) We recommend looking at the sample to see how we did it.
    + You can also grab the sample code for yourself to use as a starting point!
    - Characters are scriptable objects, and they're defined in the game code instead of the dialogue engine project.
    - We kept it separate because it's really more a game feature, and implementations will vary a lot between games.
    
    (Gabby) But at the same time, they'll share some similarities... So... Sample!
    
    (Kay) The sample implementation lets you set a separate internal name and display name, as well as define portraits by tag.
    - This is all we needed for the sample, but your game might need more data - build on the sample implementation however you want!

    >> Gabby.Unity

[Gabby.StylingText]
    (Gabby) Ooh, you wanna write something <color=#bada55ff><i><b>stylish?</b></i></color> // chartreuse
    -       Unity supports text styling in their UI components, and it works with Gabby too!

    (Kay)   You can extend it however you want as well, with custom markup tags.
    +       It's not so much a Gabby thing as it is a game thing, though.
    -       If you want to learn more about it, check out Unity's documentation - it will be clearer and more up to date.

    (Gabby) Another option is to use tags!
    -       You could make a tag called "yelling", if you want a special style for that.
    -       Then when the game is about to display it, it can change the text style to match!
    
    : Wait, so that's it? There's nothing built into Gabby?
        (Player) Wait, so that's it? There's nothing built into Gabby?
        (Kay) Well, yeah, that's it. Styling is a very in depth thing, and everyone has different preferences for markup.
        -     But, at the same time, it <i>is</i> a part of your dialogue data, so it should be written in your Gabby scripts.
        -     It's kind of two separate concepts though.
        -     Here's how I think of it: your Gabby scripts should <i>use</i> styles, but your game or game engine should <i>define</i> them.
        -     That way, a writer can focus on the "when to apply a style", instead of "what should this text look like".
        -     Sure, saying "it's up to you how you implement it" isn't the most helpful, but trust me, it works out for the better.

        (Gabby) But anyway...

    : Got it!
        (Player) Got it!

    (Gabby) Go on now, and write some stylish text!

    >> Gabby.Unity

[Gabby.TextMeshPro]
    (Kay) Yep! You can use any UI components or libraries you want, including TextMeshPro.
    - We keep the concept of the dialogue system separate from the dialogue UI.
    + The system just feeds lines to it!

    (Gabby) You can use the sample implementation as a starting point!

    >> Gabby.Unity

[Gabby.Tools]
    (Player) What tools and workflows does Gabby provide?

    (Kay)   For now, we wrote a vscode plugin. It adds syntax highlighting to make it easier to write Gabby scripts.
    (Gabby) It's really good!
    -       You should also get a spellchecker for it, there's a few available!
    (Kay)   We've thought about the main workflow we want to offer quite a lot when making Gabby.
    -       Ultimately, it comes down to centering everything around the dialogue, and the writer of that dialogue.
    -       We want the hardest part of writing dialogue to be the creative process behind putting words down.
    -       In other words, the language stays out of your way.
    -       We looked a lot at what's available already, too, and there's a lot of different approaches to solving dialogue.
    -       Many people like to use a visual tool, like a flow chart, where each node is a dialogue line and they connect to other nodes.
    -       This wasn't the workflow we wanted.
    (Gabby) Yeah. For me, I want to write text in a text editor. I'm a writer, and I want to write, that's it.
    -       I don't usually use vscode, but it's familiar enough that it works fine.
    -       I do miss being able to set fonts and text sizes and see them in the editor, though.
    (Kay)   We sometimes like to think of Gabby as a data format. Sort of like JSON.
    -       It's just a nicely defined way to write dialogue.
    -       To that end, there could be any number of tools to do it, all standalone, maybe some even sold as a product.
    -       If you want a flowchart, you could make a tool that works with these scripts behind the scenes, but presents a flowchart instead of text.
    -       Maybe someday we'll have time to make one ourselves!

[Gabby.Mods]
    (Player) What about modding?

    (Kay)   Easy peasy!
    -       Think about it. Compared to JSON, or some binary data, Gabby is way easier.
    -       Or if you had something like lists of strings. There's no flow to it! Modders could replace lines, but not create new scenarios. Not really.
    -       With Gabby, depending on your game, you can pretty much just drop in scripts or add to existing ones.
    -       If you wanna make it even better, use tags to situationally select dialogues in a generic way.